import{_ as t,c as i,o as e,a3 as a}from"./chunks/framework.1smVRZMp.js";const u=JSON.parse('{"title":"Joplin API","description":"","frontmatter":{},"headers":[],"relativePath":"zh-CN/joplin-api/index.md","filePath":"zh-CN/joplin-api/index.md"}'),d={name:"zh-CN/joplin-api/index.md"},s=a(`<h1 id="joplin-api" tabindex="-1">Joplin API <a class="header-anchor" href="#joplin-api" aria-label="Permalink to &quot;Joplin API&quot;">​</a></h1><blockquote><p><a href="https://joplin-utils.rxliuli.com/api/joplin-api/" target="_blank" rel="noreferrer">API 文档</a>, <a href="https://joplinapp.org/api/references/rest_api/" target="_blank" rel="noreferrer">Joplin 官方文档</a></p></blockquote><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>Joplin api 的 js 封装，使用 ts 编写，提供完整的类型定义，包含目前所有在文档中公开的 api。</p><h2 id="快速启动" tabindex="-1">快速启动 <a class="header-anchor" href="#快速启动" aria-label="Permalink to &quot;快速启动&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { config, noteApi } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;joplin-api&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.baseUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://127.0.0.1:27583&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.token </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;***&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> noteApi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res)</span></span></code></pre></div><blockquote><p>更多示例参考: <a href="https://github.com/rxliuli/joplin-utils/tree/master/packages/joplin-api/src/api/__tests__" target="_blank" rel="noreferrer">https://github.com/rxliuli/joplin-utils/tree/master/packages/joplin-api/src/api/__tests__</a></p></blockquote><h2 id="api-参考" tabindex="-1">API 参考 <a class="header-anchor" href="#api-参考" aria-label="Permalink to &quot;API 参考&quot;">​</a></h2><table><thead><tr><th>对象</th><th>描述</th></tr></thead><tbody><tr><td><code>eventApi</code></td><td>事件相关的 api，例如获取笔记修改历史</td></tr><tr><td><code>folderApi</code></td><td>目录相关 api，例如获取目录树</td></tr><tr><td><code>folderExtApi</code></td><td>目录扩展 api，例如移动目录</td></tr><tr><td><code>joplinApi</code></td><td>joplin 基础 api，例如检查 joplin web 服务是否打开</td></tr><tr><td><code>noteActionApi</code></td><td>笔记相关动作 api，例如在外部编辑器打开笔记</td></tr><tr><td><code>noteApi</code></td><td>笔记相关 api，例如获取笔记的内容</td></tr><tr><td><code>noteExtApi</code></td><td>笔记扩展 api，例如重命名</td></tr><tr><td><code>resourceActionApi</code></td><td>资源动作 api，例如在外部编辑器打开附件资源</td></tr><tr><td><code>resourceApi</code></td><td>资源相关 api，例如上传图片</td></tr><tr><td><code>searchApi</code></td><td>搜索相关 api</td></tr><tr><td><code>tagApi</code></td><td>标签相关 api，例如修改笔记的标签</td></tr><tr><td><code>config</code></td><td>全局 joplin web clipper 配置</td></tr><tr><td><code>PageUtil</code></td><td>分页相关的静态工具类，例如获取全量笔记列表</td></tr></tbody></table><h2 id="约定俗称" tabindex="-1">约定俗称 <a class="header-anchor" href="#约定俗称" aria-label="Permalink to &quot;约定俗称&quot;">​</a></h2><ul><li>使用 class 封装 API，例如 note 相关的 API 被封装在 <code>NoteApi</code> 类中。</li><li>同一个功能含义保持统一的命名。例如笔记列表是 <code>NoteApi.list</code>。以下为完整对照表</li></ul><table><thead><tr><th>含义</th><th>命名</th><th>示例</th></tr></thead><tbody><tr><td>列表</td><td><code>list</code></td><td><code>noteApi.list</code></td></tr><tr><td>根据 id 获取</td><td><code>get</code></td><td><code>noteApi.get</code></td></tr><tr><td>创建</td><td><code>create</code></td><td><code>noteApi.create</code></td></tr><tr><td>修改</td><td><code>update</code></td><td><code>noteApi.update</code></td></tr><tr><td>删除</td><td><code>remove</code></td><td><code>noteApi.remove</code></td></tr></tbody></table><ul><li>存在一些特殊情况，例如涉及到多个实体的 api，命名则一般是 <code>操作实体 + by + 依据实体</code>，例如 根据笔记 id 获取标签列表的 api 是 <code>noteApi.tagsById</code></li></ul><h2 id="一些问题" tabindex="-1">一些问题 <a class="header-anchor" href="#一些问题" aria-label="Permalink to &quot;一些问题&quot;">​</a></h2><ul><li><code>get</code> 方法不应该报错，如果不存在应该返回 <code>null</code> 而非抛出异常</li></ul>`,15),o=[s];function l(p,r,n,h,c,k){return e(),i("div",null,o)}const A=t(d,[["render",l]]);export{u as __pageData,A as default};
