function r(t,...s){const e=new Set(s);return Object.keys(t).reduce((o,c)=>(e.has(c)||Reflect.set(o,c,Reflect.get(t,c)),o),{})}var f=class{static scan(t){const s=new Set(["constructor"]);return Reflect.ownKeys(Reflect.getPrototypeOf(t)).filter(e=>!s.has(e)&&t[e]instanceof Function)}static bindMethodThis(t){return this.scan(t).forEach(s=>{const e=s;Reflect.set(t,e,t[e].bind(t))}),t}};export{f as C,r as o};
